This is the final code I have for the esp32 board:

#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <Servo.h>

// Replace with your network credentials
const char *ssid = "YOUR_SSID";
const char *password = "YOUR_PASSWORD";

// Define static IP settings
IPAddress local_IP(192, 168, 1, 184); // The static IP address

// Define the turning degrees for the servo
int turningDegrees = 90;

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Create a servo object
Servo servo;

// Define the servo pin
const int servoPin = 13;

void setup()
{
  // Start the Serial Monitor
  Serial.begin(115200);

  // Set up the servo
  servo.attach(servoPin);

  Serial.println("CONFIGURATION PARAMETERS:");
  Serial.println("WLAN SSID: " + String(ssid));
  Serial.println("WLAN Password: " + String(password));
  Serial.print("Device IP: ");
  Serial.println(local_IP);
  Serial.print("Servo PIN: ");
  Serial.println(servoPin);
  Serial.print("Turning Degrees: ");
  Serial.println(turningDegrees);

  // Set up WiFi with static IP
  if (!WiFi.config(local_IP, INADDR_NONE, INADDR_NONE))
  {
    Serial.println("STA Failed to configure");
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  unsigned long startAttemptTime = millis();

  // Wait for connection or timeout after 60 seconds
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 60000)
  {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  if (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("Failed to connect to WiFi");
  }
  else
  {
    Serial.println("Connected to WiFi");

    // Define the GET request handling for the servo
    server.on("/press", HTTP_GET, [](AsyncWebServerRequest *request)
              {
                // Move the servo
                servo.write(90);   // Move to 90 degrees
                delay(500);          // Wait for half second
                servo.write(0);    // Move back to 0 degrees
                request->send(200, "text/plain", "SUCCESS"); });

    // Define the GET request handling for the areyoualive endpoint
    server.on("/areyoualive", HTTP_GET, [](AsyncWebServerRequest *request)
              { request->send(200, "text/plain", "OK"); });

    // Start server
    server.begin();
  }
}

void loop()
{
  // Nothing to do here, the server will handle the requests
}



Now I need a shell script that using some whiptail dialogs collects all the parameters from the user input (WLAN ssid, WLAN pasword, device IP address, servo PIN, and servo turning degrees), compose the code with the actual parameters and uploads it to the device via serial port (if possible autodetecting this). Then it prints in a info dialog the device configuration sent by the device over the serial port.Then it waits for a "STA Failed to configure" message sent over the serial port. If this message is found, it spawns a dialog with that message. If the user press "OK", the dialog starts over from the beginning. If the user press "Cancel" the script terminates. If instead a "STA configuration successful" message is found on the serial port, the script checks for a "Failed to connect to WiFi" or a "Connected to WiFi" message. If the first one is found, it spawns a dialog with that message. If the user press "OK", the dialog starts over from the beginning. If the user press "Cancel" the script terminates. If instead a "Connected to WiFi" message is found, the script checks for reachability through the network sending a GET request to the /areyoualive endpoint, confirming (alway through whiptail dialog and console printing) that the device is ready and reachable (when the response is "OK"). If this test is successful, it sends a request on the /press endpoint so that the user can check the device functionality and prints back a success message if the response of the /press GET request is "SUCCESS" or a fail message if it fails or sends a "FAILURE" response. 